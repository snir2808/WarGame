[{"C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\index.js":"1","C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\reportWebVitals.js":"2","C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\App.js":"3","C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\End.jsx":"4","C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\Home.jsx":"5","C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\Game.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":2177,"mtime":1610365499088,"results":"10","hashOfConfig":"8"},{"size":1547,"mtime":1613920115860,"results":"11","hashOfConfig":"8"},{"size":2583,"mtime":1613915466884,"results":"12","hashOfConfig":"8"},{"size":9593,"mtime":1613920853949,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"lvgy65",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\index.js",[],["31","32"],"C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\reportWebVitals.js",[],"C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\App.js",["33","34","35"],"import './App.css';\nimport React, {useState} from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport Game from './Game'\nimport Home from './Home'\nimport End from './End'\n\n\nfunction App() {\n//סטייט לשימוש שמירה של קלפים למחשב\n  const [comCard, setComCrad] =useState([]);\n  //סטייט לשמירה של משתמש חדש(יש רק משתמש אחד)\n  const [player, setPlayer] =useState();\n  //סטייט לשמירה של משחק חוזר (מעגל זיכרון לשמירת תוצאות של משחקים)\n  const [playerAfterGame, setPlayerAfterGame] =useState('');\n  //משתנה לקבלת חבילת קלפים חדשה למחשב\n  var newcomCrards = 0\n  var newplayerCards = 0\n  //משתנה להעברה של נתונים לקומפננטה מכיוון שסטייט לא אמין בהעברת מידע\n  var results = 0\n  //פונקציה חוזרת להבערת מידע להמשך משחקים \n  let getInfoFormHome = (player,comCard,playerCards) => {\n    setPlayer({name: player, numberOfWin: 0, numberOfLose: 0, numberOfGame:0,cards: playerCards})\n    setComCrad(comCard)\n  }\n//פונקציה שמעבירה את אובייקט המשתמש לאחר שמירה של נתונים מהמשחק האחרון \n  let takeInfo = (player) =>{\n    results = player\n  }\n//פונקציה ששומרת קלפים חדשים למשחק הבא\n  let keepPlay = (comCrards,playerCards) =>{\n    newcomCrards = comCrards;\n    newplayerCards = playerCards;\n  }\n\n  return (\n    <div className=\"App\">\n    <Router>\n        <Switch>\n        <Route exact path = '/' >\n           <Home infoFunc = {getInfoFormHome}/>\n          </Route>\n          <Route path = '/game' \n          component ={()=>{return(\n          <Game\n          newCom ={newcomCrards}\n          newPlayer = {newplayerCards}\n          score = {takeInfo} \n          player ={player}\n          computer = {comCard}\n          />)}}>\n            </Route>\n            <Route path='/end' component={()=>{return(<End keepPlay={keepPlay} player ={results}/>)}}></Route> \n        </Switch>\n      </Router>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\End.jsx",[],"C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\Home.jsx",["36","37","38","39","40"],"import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {useHistory} from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function Home(props) {\r\n\r\n    const history = useHistory()\r\n    const [cards, setCards] = useState([])\r\n    const [comCard, setComCrad] =useState([])\r\n    const [player, setPlayer] =useState()\r\n    const [playerCards, setPlayerCards] =useState([])\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\nconst classes = useStyles();\r\n\r\n//שני המשתנים האלו משמשים אותי להעברה של מידע ופעולות חשבון כי סטייט לא פועל כראוי\r\n    var num = []\r\n    var comCrards = []\r\n    //פונקציה ליצירת חבילת קלפים כולל עירבוב שלהם וכולל חלוקה מדוייקת לשני שחקנים\r\n    let cardFunc = () =>{\r\n        for(let i = 1;i < 14;i++){\r\n          for(let j = 0;j < 4 ;j++){\r\n            num.push(i)\r\n          }\r\n        }\r\n        //פעולת מיון שמערבבת נתונים במערך\r\n        num.sort(() => Math.random() - 0.5);\r\n        for(let i = 0;i < 26;i++){\r\n          comCrards.push(num[i])\r\n        }\r\n        setComCrad(comCrards)\r\n        for(let i = 0;i < 26 ;i++){\r\n          num.splice(i,1)\r\n        }\r\n        setPlayerCards(num)\r\n      }\r\n      //פונקציה שמכניסה את שם השחקן לתוך סטייט \r\n      let playerName = (e) =>{\r\n        let name = e.target.value\r\n         setPlayer(name)\r\n      }\r\n      //פונקציה שבודק אם הוכנס ערך לשדה הכתיבה. במידה וכן שולחת פקודה ליצירת אובייקט משתמש חדש\r\n      let validName = () =>{\r\n        if(player == undefined){\r\n          alert('bla bla bla')\r\n        }else{\r\n          props.infoFunc(player,comCrards,num)\r\n          //היסטורי משמש אותי להעברה לערוץ אחר ללא צורך בלחיצה פיזית \r\n          history.push('/game')\r\n        }\r\n      }\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n         <h1 className='rforw'>ReadY FoR WaR ? </h1>\r\n          <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField onChange={playerName} id=\"filled-basic\" label=\"Name\" variant=\"filled\" />\r\n    </form>\r\n      <Button  onClick={()=>{cardFunc();validName();}} variant=\"contained\">start</Button>\r\n        </div>\r\n    )\r\n}\r\n",["41","42"],"C:\\Users\\SNIR\\Desktop\\WarGame\\WarGame\\src\\Game.jsx",["43","44","45","46","47","48","49","50"],"import React, {useState} from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport {useHistory} from 'react-router-dom';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport useSound from 'use-sound';\r\nimport sound from './media/WhatsApp Audio 2021-02-21 at 12.53.08.mp4'\r\nimport card_2 from './media/nicubunu_Ornamental_deck_2_of_spades (1).svg'\r\nimport card_3 from './media/nicubunu_Ornamental_deck_3_of_spades.svg'\r\nimport card_4 from './media/nicubunu_Ornamental_deck_4_of_spades.svg'\r\nimport card_5 from './media/nicubunu_Ornamental_deck_5_of_spades.svg'\r\nimport card_6 from './media/nicubunu_Ornamental_deck_6_of_spades.svg'\r\nimport card_7 from './media/nicubunu_Ornamental_deck_7_of_spades.svg'\r\nimport card_8 from './media/nicubunu_Ornamental_deck_8_of_spades.svg'\r\nimport card_9 from './media/nicubunu_Ornamental_deck_9_of_spades.svg'\r\nimport card_10 from './media/nicubunu_Ornamental_deck_10_of_spades.svg'\r\nimport card_11 from './media/nicubunu_Ornamental_deck_Jack_of_spades.svg'\r\nimport card_12 from './media/nicubunu_Ornamental_deck_Queen_of_spades.svg'\r\nimport card_13 from './media/nicubunu_Ornamental_deck_King_of_spades.svg'\r\nimport card_14 from './media/nicubunu_Ornamental_deck_Ace_of_spades.svg'\r\nimport card from './media/nicubunu_Card_backs_grid_red_preview_3d99.png'\r\n\r\n\r\nexport default function Game(props) {\r\n    const [play] = useSound(sound);\r\n\r\n    //סטייט שאחרי להסתרת הקלפים עד ללחיצה ראשונית\r\n    const [secStyle, setSecStyle] =useState({display:'block'})\r\n    //סטייט שמציג את הקלפים לאחר לחיצה ראשונית\r\n    const [ style, setStyle] = useState({display: 'none'})\r\n    //סטייס שמחזיק את מערך השחקן בפעם הראשונה שמשחק\r\n    const [player, setPlayer] = useState(props.newPlayer)\r\n    // סטייט שמחזיק את מערך הקלפים של המשתמש\r\n    const [playerCards, setPlayerCards] = useState(0)\r\n    // סטייט שמחזיק את מערך הקלפים של המחשב\r\n    const [comCards, setComCards] = useState(props.newCom)\r\n    // סטייט שסופר את מספר הסיבובים שנעשו במשחק (הוא גם משמש לעבור על כל תא במערך לפי הסדר)\r\n    const [cunter, setCunter] = useState(0)\r\n    // סטייט שמחשב כמות נקודות בכל פעם שמחשב מנצח בסיבוב\r\n    const [comScore, setComScore] = useState(0)\r\n    //סטייט שמחשב כמות נקודות בכל פעם שהמשתמש מנצח\r\n    const [playerScore, setPlayerScore] = useState(0)\r\n    // סטייט שמחזיק את תמונות הקלפים\r\n    const [aIcardDisplay, setAIcardDisplay]= useState(card)\r\n    const [palyercardDisplay, setPlayercardDisplay]= useState(card)\r\n    const [open, setOpen] = useState(false);\r\n\r\n\r\n\r\n    const history = useHistory()\r\n// הכנסת חבילת קלפים חדשה למחשב (קורה רק מהמשחק השני כדי לא לקבל שגיאה שיש ערך ריק)\r\n    let cardForCom = props.newCom\r\n//תנאי שמציל את הקוד במקרה שמגיע מערך ריק מהסיבוב השני\r\n        if(props.newCom == 0){\r\n            cardForCom = props.computer\r\n        }\r\n        let openModal = ()=>{\r\n            setOpen(true)\r\n            play()\r\n            // setTimeout(() => {\r\n            //     setOpen(false)\r\n            // }, 5000);\r\n        }\r\n\r\n        //פונקציה שאחראית לניהול המשחק \r\n    let next = () => {\r\n        console.log(props.newCom)\r\n        setSecStyle({display: 'none'})\r\n        setStyle({display:'block'})\r\n        //תנאי שפעיל מהסיבוב השני מכיוון שסטייט מתאפס ברינדור אז אני נותן לו ערך המשכי \r\n        if(player == 0){\r\n            setPlayer(props.player)\r\n        }\r\n        //משתנה שמשמש אותי לשמור תוצאות המשחק במקום להיסתבך עם עריכת סטייט\r\n        let result = 0\r\n        //הכנסת קליפים אחד אחד למשחק למשתמש ולמחשב\r\n        setPlayerCards( props.player.cards[cunter])\r\n        setComCards(cardForCom[cunter])\r\n        switch (cardForCom[cunter]) {\r\n            case 1:\r\n                setAIcardDisplay(card_2)\r\n                break;\r\n              case 2:\r\n                setAIcardDisplay(card_3)\r\n                break;\r\n              case 3:\r\n                setAIcardDisplay(card_4)\r\n                break;\r\n              case 4:\r\n                setAIcardDisplay(card_5)\r\n                break;\r\n              case 5:\r\n                setAIcardDisplay(card_6)\r\n                break;\r\n              case 6:\r\n                setAIcardDisplay(card_7)\r\n                break;\r\n              case  7:\r\n                setAIcardDisplay(card_8)\r\n                break;\r\n              case  8:\r\n                setAIcardDisplay(card_9)\r\n                break;\r\n              case  9:\r\n                setAIcardDisplay(card_10)\r\n                break;\r\n              case  10:\r\n                setAIcardDisplay(card_11)\r\n                break;\r\n              case  11:\r\n                setAIcardDisplay(card_12)\r\n                break;\r\n              case  12:\r\n                setAIcardDisplay(card_13)\r\n                break;\r\n              case  13:\r\n                setAIcardDisplay(card_14)\r\n                break;\r\n        }\r\n\r\n        switch (props.player.cards[cunter]) {\r\n            case 1:\r\n                setPlayercardDisplay(card_2)\r\n                break;\r\n              case 2:\r\n                setPlayercardDisplay(card_3)\r\n                break;\r\n              case 3:\r\n                setPlayercardDisplay(card_4)\r\n                break;\r\n              case 4:\r\n                setPlayercardDisplay(card_5)\r\n                break;\r\n              case 5:\r\n                setPlayercardDisplay(card_6)\r\n                break;\r\n              case 6:\r\n                setPlayercardDisplay(card_7)\r\n                break;\r\n              case  7:\r\n                setPlayercardDisplay(card_8)\r\n                break;\r\n              case  8:\r\n                setPlayercardDisplay(card_9)\r\n                break;\r\n              case  9:\r\n                setPlayercardDisplay(card_10)\r\n                break;\r\n              case  10:\r\n                setPlayercardDisplay(card_11)\r\n                break;\r\n              case  11:\r\n                setPlayercardDisplay(card_12)\r\n                break;\r\n              case  12:\r\n                setPlayercardDisplay(card_13)\r\n                break;\r\n              case  13:\r\n                setPlayercardDisplay(card_14)\r\n                break;\r\n        }\r\n\r\n        //תנאי שבודק מי ניצח בסיבוב הנוכחי\r\n        if(comCards > playerCards){\r\n            \r\n            setComScore(comScore +1)\r\n            \r\n        }else if(comCards < playerCards){\r\n            \r\n            setPlayerScore(playerScore +1)\r\n        }\r\n        if(props.player.cards[cunter] == cardForCom[cunter] && comCards !== 0){\r\n          console.log(playerCards[cunter])\r\n          console.log(comCards[cunter])\r\n            openModal()\r\n        }\r\n        setCunter(cunter +1)\r\n        // משתנה שיעזור לי לערוך את האובייקט בצורה נוחה כולל היסטוריה משחקים \r\n        var newPlayer = player\r\n        //חלק זה אחראי על בדיקת מנצח בכל משחק ומעדכן את אובייקט המשתמש בהתאם\r\n        if(cunter >= 25){\r\n            if(playerScore > comScore ){\r\n                result = {\r\n                    name: props.player.name,\r\n                    numberOfWin: newPlayer.numberOfWin +1,\r\n                    numberOfLose: newPlayer.numberOfLose, numberOfGame:newPlayer.numberOfGame +1,\r\n                    cards: props.player.cards\r\n                }\r\n            }else if(playerScore < comScore){\r\n                result = {\r\n                    name: newPlayer.name, \r\n                    numberOfWin: newPlayer.numberOfWin,\r\n                    numberOfLose: newPlayer.numberOfLose +1,\r\n                    numberOfGame:newPlayer.numberOfGame +1,\r\n                    cards: props.player.cards\r\n                }\r\n            }else{\r\n                //חלק זה אחראי על כמות ניצחונות זהה בין השחקן למחשב. במקרה כזה השחקן עדיין הפסיד\r\n                result = {\r\n                    name: newPlayer.name, \r\n                    numberOfWin: newPlayer.numberOfWin, \r\n                    numberOfLose: newPlayer.numberOfLose +1, numberOfGame: newPlayer.numberOfGame +1,\r\n                    cards: props.player.cards\r\n                }\r\n            }\r\n            //דגל לוודא שאכן עודכן המערך של השחקן \r\n            if(result != 0){\r\n            props.score(result)\r\n            history.push('/end')\r\n           }\r\n        }\r\n    }\r\n    return (\r\n        <div className = 'game'>\r\n            <h1 className='gameName'>AI</h1>\r\n            <p style={secStyle}></p>\r\n            \r\n            <p  style={style}><img src={aIcardDisplay}/></p>\r\n            <p style={style}><img src={palyercardDisplay}/></p>\r\n            <p style={secStyle}></p>\r\n            <h1 className='gameName'>{props.player.name}</h1>\r\n            <Button onClick={next} variant=\"contained\">GO!</Button>\r\n            <Popup open={open} closeOnDocumentClick >\r\n        <div>\r\n\r\n        <h1 className= 'rforw1'>WAR!</h1>\r\n        </div>\r\n      </Popup>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":3,"column":50,"nodeType":"57","messageId":"58","endLine":3,"endColumn":54},{"ruleId":"55","severity":1,"message":"59","line":15,"column":10,"nodeType":"57","messageId":"58","endLine":15,"endColumn":25},{"ruleId":"55","severity":1,"message":"60","line":15,"column":27,"nodeType":"57","messageId":"58","endLine":15,"endColumn":45},{"ruleId":"55","severity":1,"message":"61","line":10,"column":12,"nodeType":"57","messageId":"58","endLine":10,"endColumn":17},{"ruleId":"55","severity":1,"message":"62","line":10,"column":19,"nodeType":"57","messageId":"58","endLine":10,"endColumn":27},{"ruleId":"55","severity":1,"message":"63","line":11,"column":12,"nodeType":"57","messageId":"58","endLine":11,"endColumn":19},{"ruleId":"55","severity":1,"message":"64","line":13,"column":12,"nodeType":"57","messageId":"58","endLine":13,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":54,"column":19,"nodeType":"67","messageId":"68","endLine":54,"endColumn":21},{"ruleId":"51","replacedBy":"69"},{"ruleId":"53","replacedBy":"70"},{"ruleId":"65","severity":1,"message":"66","line":54,"column":25,"nodeType":"67","messageId":"68","endLine":54,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":71,"column":19,"nodeType":"67","messageId":"68","endLine":71,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":79,"column":9,"nodeType":"73","messageId":"74","endLine":119,"endColumn":10},{"ruleId":"71","severity":1,"message":"72","line":121,"column":9,"nodeType":"73","messageId":"74","endLine":161,"endColumn":10},{"ruleId":"65","severity":1,"message":"66","line":172,"column":39,"nodeType":"67","messageId":"68","endLine":172,"endColumn":41},{"ruleId":"65","severity":1,"message":"75","line":207,"column":23,"nodeType":"67","messageId":"68","endLine":207,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":218,"column":31,"nodeType":"78","endLine":218,"endColumn":57},{"ruleId":"76","severity":1,"message":"77","line":219,"column":30,"nodeType":"78","endLine":219,"endColumn":60},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'playerAfterGame' is assigned a value but never used.","'setPlayerAfterGame' is assigned a value but never used.","'cards' is assigned a value but never used.","'setCards' is assigned a value but never used.","'comCard' is assigned a value but never used.","'playerCards' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["79"],["80"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]